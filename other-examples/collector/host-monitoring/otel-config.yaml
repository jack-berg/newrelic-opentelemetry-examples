extensions:
  health_check:

receivers:
  otlp:
    protocols:
      grpc:
      http:

  hostmetrics:
    # Mount the host file system when running in docker so we can monitor the host system,
    # not the docker container. For more info see:
    # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver#collecting-host-metrics-from-inside-a-container-linux-only
    # Delete for production deployments.
    root_path: ${HOST_METRICS_ROOT_PATH}
    collection_interval: 20s
    scrapers:
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
      load:
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      disk:
      filesystem:
        metrics:
          system.filesystem.utilization:
            enabled: true
        # Reading /containers/services causes error running in docker.
        # Delete for production deployments.
        exclude_mount_points:
          mount_points: ["/containers/services"]
          match_type: strict
      network:
      paging:
        metrics:
          system.paging.utilization:
            enabled: true
      processes:
      process:
        metrics:
          process.cpu.utilization:
            enabled: true
          process.cpu.time:
            enabled: false
        # Mute various errors reading process metrics running locally in docker.
        # Delete for production deployments.
        mute_process_exe_error: true
        mute_process_user_error: true
        mute_process_io_error: true

  filelog:
    include:
      - /var/log/alternatives.log
      - /var/log/cloud-init.log
      - /var/log/auth.log
      - /var/log/dpkg.log
      - /var/log/syslog
      - /var/log/messages
      - /var/log/secure
      - /var/log/yum.log

processors:

  transform/truncate:
    trace_statements:
      - context: span
        statements:
          - truncate_all(attributes, 4095)
          - truncate_all(resource.attributes, 4095)
    log_statements:
      - context: log
        statements:
          - truncate_all(attributes, 4095)
          - truncate_all(resource.attributes, 4095)

  memory_limiter:
    check_interval: 1s
    limit_mib: 1000
    spike_limit_mib: 200

  batch:

  resourcedetection:
    detectors: ["env", "system"]
    system:
      hostname_sources: ["os"]
      resource_attributes:
        host.id:
          enabled: true

  resourcedetection/cloud:
    detectors: ["gcp", "ec2", "azure"]
    timeout: 2s
    override: false

  # host.id is required for NewRelic host entity synthesis and relationships, but is
  # not included by any resourcedetection detector when running with docker on macOS.
  # We include a fallback value for demonstration purposes.
  # Delete for production deployments.
  resource:
    attributes:
      - key: host.id
        value: localhost
        action: upsert

exporters:
  otlphttp:
    endpoint: $NEW_RELIC_OTLP_ENDPOINT
    headers:
      api-key: $NEW_RELIC_API_KEY

service:
  pipelines:

    metrics/hostmetrics:
      receivers: [hostmetrics]
      processors: [memory_limiter, resourcedetection, resourcedetection/cloud, resource, batch]
      exporters: [otlphttp]

    metrics:
      receivers: [otlp]
      processors: [memory_limiter, transform/truncate, resourcedetection, resourcedetection/cloud, resource, batch]
      exporters: [otlphttp]

    traces:
      receivers: [otlp]
      processors: [memory_limiter, transform/truncate, resourcedetection, resourcedetection/cloud, resource, batch]
      exporters: [otlphttp]

    logs:
      receivers: [otlp, filelog]
      processors: [memory_limiter, transform/truncate, resourcedetection, resourcedetection/cloud, resource, batch]
      exporters: [otlphttp]

  extensions: [health_check]