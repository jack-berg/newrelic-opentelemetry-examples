import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    id 'org.springframework.boot'
}

configurations.all {
  exclude module: 'spring-boot-starter-logging'
}

configurations {
  agent
  sampler
}

dependencies {
  implementation 'io.opentelemetry:opentelemetry-api'

  agent(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${project.property('otelInstrumentationVersion')}"))
  agent("io.opentelemetry.javaagent:opentelemetry-javaagent")
  sampler("io.opentelemetry.contrib:opentelemetry-samplers:1.39.0-alpha")

  implementation platform(SpringBootPlugin.BOM_COORDINATES)
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-log4j2'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
}

tasks.register("copyAgent", Copy) {
  from(configurations.agent.singleFile)
  into(layout.buildDirectory.dir('agent'))
  rename("opentelemetry-javaagent-.*\\.jar", "opentelemetry-javaagent.jar")
}

bootRun {
  mainClass.set 'com.newrelic.app.Application'

  // Before running, build the config-extension shadow jar
  dependsOn(":agent-nr-config:config-extension:shadowJar")
  // Before running, copy the agent to a reliable place in the build dir
  dependsOn("copyAgent")

  def extensionPath = project(":agent-nr-config:config-extension").buildDir.toString() + "/libs/config-extension.jar"
  def samplersPath = configurations.sampler.getFiles().stream()
      .filter(file -> file.toString().contains("opentelemetry-samplers-1.39.0-alpha.jar"))
      .findFirst()
      .orElse(null);

  def agentPath = project.buildDir.toString() + "/agent/opentelemetry-javaagent.jar"

  jvmArgs = [
      // Set the opentelemetry-java-instrumentation agent as the javaagent
      "-javaagent:${agentPath}",
      // "-Dotel.javaagent.debug=true",
      "-Dotel.experimental.config.file=/Users/jberg/code/newrelic/newrelic-opentelemetry-examples/other-examples/java/agent-nr-config/sdk-config.yaml",
      // Use the config-extension shadowJar to configure the agent via SPI
      "-Dotel.javaagent.extensions=${extensionPath},${samplersPath}"
  ]
}
